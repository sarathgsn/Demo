make config : THhis utility goes through each option , one by one and asks user to interactively selct yes or no


One notable difference between printf() and printk() is that printk() allows you to specify a
priority flag. This flag is used by syslogd(8) to decide where to display kernel messages.


The kernel stack is neither large nor dynamic; it is small and fixed in size. The exact size of the
kernel's stack varies by architecture. On x86, the stack size is configurable at compile-time and can
be either 4 or 8KB. Historically, the kernel stack is two pages, which generally implies that it is 8KB
on 32-bit architectures and 16KB on 64-bit architecturesthis size is fixed and absolute. Each process
receives its own stack.

. Each
thread includes a unique program counter, process stack, and set of processor registers.

System calls and exception handlers are well-defined interfaces into the kernel. A process can begin
executing in kernel-space only through one of these interfacesall access to the kernel is through
these interfaces.

"""""""process context and interrupt context"""""""""


 Reentrant Kernels::

All Unix kernels are 
reentrant
. This means that several processes may be executing in Kernel Mode at
the same time. Of course, on uniprocessor systems, only one process can progress, but many can be
blocked in Kernel Mode when waiting for the CPU or the completion of some I/O operation. For
instance, after issuing a read to a disk on behalf of a process, the kernel lets the disk controller
handle it and resumes executing other processes. An interrupt notifies the kernel when the device
has satisfied the read, so the former process can resume the execution.
 
One way to provide reentrancy is to write functions so that they modify only local variables and do
not alter global data structures. Such functions are called 
reentrant functions
 . But a reentrant kernel
is not limited only to such reentrant functions (although that is how some real-time kernels are
implemented). Instead, the kernel can include nonreentrant functions and use locking mechanisms to
ensure that only one process can execute a nonreentrant function at a time.


f a hardware interrupt occurs, a reentrant kernel is able to suspend the current running process
even if that process is in Kernel Mode. This capability is very important, because it improves the
throughput of the device controllers that issue interrupts. Once a device has issued an interrupt, it
waits until the CPU acknowledges it. If the kernel is able to answer quickly, the device controller will
be able to perform other tasks while the CPU handles the interrupt.

